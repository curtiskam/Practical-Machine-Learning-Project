inTrain <- createDataPartition(trainData$classe, p=0.70, list=F)
trainSet <- trainData[inTrain, ]
testSet <- trainData[-inTrain, ]
## Train rpart Tree
modFitRpart <-  train(classe ~ ., data=trainSet, method="rpart")
## load libraries
library(caret)
## download data files
trainFile <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainFileName <- "trainingdata.csv"
testFile <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testFileName <- "testdata.csv"
download.file(trainFile, destfile=trainFileName)
download.file(testFile, destfile=testFileName)
## Read data sets into data frames
trainData <- read.csv("trainingdata.csv")
testData <- read.csv("testdata.csv")
## Clean the train data data by removing all NA
trainData <- trainData[, colSums(is.na(trainData)) == 0]
#Remove vriables with little variance
smallVariance <- nearZeroVar(trainData, saveMetrics=TRUE)
trainData <- trainData[,nzv$nzv==FALSE]
##set testData columns equal to trainData columns
goodColumns <- colnames(trainData)
testData <- testData[goodColumns]
## Partition TrainData to create a training set and a test set within the training data
set.seed(333) # For reproducibile purpose
inTrain <- createDataPartition(trainData$classe, p=0.70, list=F)
trainSet <- trainData[inTrain, ]
testSet <- trainData[-inTrain, ]
## Train rpart Tree
modFitRpart <-  train(classe ~ ., data=trainSet, method="rpart")
library(caret)
library(randomForest)
library(e1071)
library(rattle)
library(knitr)
loadPakage("rattle")
loadPackage("rattle")
loadpackage("rattle")
install.packages("rattle")
install.packages("knitr")
library(caret)
library(randomForest)
library(e1071)
library(rattle)
library(knitr)
trainFile <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainFileName <- "trainingdata.csv"
testFile <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testFileName <- "testdata.csv"
download.file(trainFile, destfile=trainFileName)
download.file(testFile, destfile=testFileName)
trainData <- read.csv("trainingdata.csv")
testData <- read.csv("testdata.csv")
trainData <- trainData[, colSums(is.na(trainData)) == 0]
smallVariance <- nearZeroVar(trainData, saveMetrics=TRUE)
trainData <- trainData[,smallVariance$smallVariance==FALSE]
set.seed(333)
inTrain <- createDataPartition(trainData$classe, p=0.70, list=F)
trainSet <- trainData[inTrain, ]
testSet <- trainData[-inTrain, ]
modFitRpart <-  train(classe ~ ., data=trainSet, method="rpart")
inTrain <- createDataPartition(trainData$classe, p=0.70, list=FALSE)
inTrain <- createDataPartition(trainData$classe, p=0.70, list=FALSE)
trainData <- read.csv("trainingdata.csv")
testData <- read.csv("testdata.csv")
trainData <- trainData[, colSums(is.na(trainData)) == 0]
trainData <- read.csv("trainingdata.csv")
** Remove vriables with little variance **
smallVariance <- nearZeroVar(trainData, saveMetrics=TRUE)
trainData <- trainData[,smallVariance$smallVariance==FALSE]
trainData <- read.csv("trainingdata.csv")
testData <- read.csv("testdata.csv")
## load libraries
library(caret)
library(randomForest)
library(e1071)
library(rattle)
library(knitr)
## download data files
trainFile <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainFileName <- "trainingdata.csv"
testFile <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testFileName <- "testdata.csv"
download.file(trainFile, destfile=trainFileName)
download.file(testFile, destfile=testFileName)
## Read data sets into data frames
trainData <- read.csv("trainingdata.csv")
testData <- read.csv("testdata.csv")
## Clean the train data data by removing all NA
trainData <- trainData[, colSums(is.na(trainData)) == 0]
##Remove vriables with little variance **
smallVariance <- nearZeroVar(trainData, saveMetrics=TRUE)
trainData <- trainData[,smallVariance$smallVariance==FALSE]
trainData <- read.csv("trainingdata.csv")
## Clean the train data data by removing all NA
trainData <- trainData[, colSums(is.na(trainData)) == 0]
##Remove vriables with little variance **
smallVariance <- nearZeroVar(trainData, saveMetrics=TRUE)
trainData <- trainData[,smallVariance$smallVariance==FALSE]
trainData <- read.csv("trainingdata.csv")
##Remove vriables with little variance **
smallVariance <- nearZeroVar(trainData, saveMetrics=TRUE)
trainData <- trainData[,smallVariance$smallVariance==FALSE]
testData <- read.csv("testdata.csv")
trainData <- read.csv("trainingdata.csv")
set.seed(333) # For reproducibile purpose
inTrain <- createDataPartition(trainData$classe, p=0.70, list=F)
trainSet <- trainData[inTrain, ]
testSet <- trainData[-inTrain, ]
## Train Decsion Tree
modFitRpart <-  train(classe ~ ., data=trainSet, method="rpart",  preProc = c("center", "scale")
)
## Train Random Forest Tree
modFitRF <- train(classe ~ ., data=trainSet, method="rf" ,  preProc = c("center", "scale"))
predictRpart <- predict(modFitRpart, testSet. type = "class")
cmRpart <- confustionMatrix(predictRpart, testSet$classe)
cmRpart
predictRF <- predict(modFitRF, testSet. type = "class")
cmRF <- confustionMatrix(predictRF, testSet$classe)
cmRF
predictRpart <- predict(modFitRpart, testSet, type = "class")
cmRpart <- confustionMatrix(predictRpart, testSet$classe)
cmRpart
predictRF <- predict(modFitRF, testSet, type = "class")
cmRF <- confustionMatrix(predictRF, testSet$classe)
cmRF
*Background*
Using devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement â€“ a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: http://groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset).
*Data*
The training data for this project are available here:
https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv
The test data are available here:
https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv
The data for this project come from this source: http://groupware.les.inf.puc-rio.br/har. If you use the document you create for this class for any purpose please cite them as they have been very generous in allowing their data to be used for this kind of assignment.
**load neccessary libraries**
```{r load_data}
library(caret)
library(randomForest)
library(e1071)
library(knitr)
```
**Downlaod the Data Files**
trainFile <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainFileName <- "trainingdata.csv"
testFile <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testFileName <- "testdata.csv"
download.file(trainFile, destfile=trainFileName)
download.file(testFile, destfile=testFileName)
** Read data sets into data frames **
trainData <- read.csv("trainingdata.csv")
testData <- read.csv("testdata.csv")
** Remove vriables with little variance **
smallVariance <- nearZeroVar(trainData, saveMetrics=TRUE)
trainData <- trainData[,smallVariance$smallVariance==FALSE]
** Partition TrainData to create a training set and a test set within the training data **
set.seed(333)
inTrain <- createDataPartition(trainData$classe, p=0.70, list=FALSE)
trainSet <- trainData[inTrain, ]
testSet <- trainData[-inTrain, ]
** Train Decsion Tree **
modFitRpart <-  train(classe ~ ., data=trainSet, method="rpart")
** Train Random Forest Tree **
modFitRF <- train(classe ~ ., data=trainSet, method="rf")
**Test the Models**
predictRpart <- predict(modFitRpart, testSet, type = "class")
cmRpart <- confustionMatrix(predictRpart, testSet$classe)
cmRpart
predictRF <- predict(modFitRF, testSet, type = "class")
cmRF <- confustionMatrix(predictRF, testSet$classe)
cmRF
## load libraries
library(caret)
library(randomForest)
library(e1071)
library(rattle)
library(knitr)
## download data files
trainFile <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainFileName <- "trainingdata.csv"
testFile <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testFileName <- "testdata.csv"
download.file(trainFile, destfile=trainFileName)
download.file(testFile, destfile=testFileName)
## Read data sets into data frames
trainData <- read.csv("trainingdata.csv")
testData <- read.csv("testdata.csv")
## Partition TrainData to create a training set and a test set within the training data
set.seed(333) # For reproducibile purpose
inTrain <- createDataPartition(trainData$classe, p=0.70, list=F)
trainSet <- trainData[inTrain, ]
testSet <- trainData[-inTrain, ]
## Train Decsion Tree
modFitRpart <-  train(classe ~ ., data=trainSet, method="rpart",  preProc = c("center", "scale"))
## Train Decsion Tree
modFitRpart <-  train(classe ~ ., data=trainSet, method="rpart",  preProc = c("center", "scale"))
## Train Random Forest Tree
modFitRF <- train(classe ~ ., data=trainSet, method="rf" ,  preProc = c("center", "scale"))
##Test the Models##
predictRpart <- predict(modFitRpart, testSet, type = "class")
cmRpart <- confustionMatrix(predictRpart, testSet$classe)
cmRpart
predictRF <- predict(modFitRF, testSet, type = "class")
cmRF <- confustionMatrix(predictRF, testSet$classe)
cmRF
View(testData)
predictRpart <- predict(modFitRpart, testSet)
cmRpart <- confusionMatrix(predictRpart, testSet$classe)
predictRF <- predict(modFitRF, testSet)
predictRF
predictRpart <- predict(modFitRpart, testSet, type = "class")
predictRpart <- predict(modFitRpart, testSet, type = "prob")
predictRpart
predictRpart <- predict(modFitRpart, testSet, type = "raw")
predictRpart
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(predictRpart)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(predictRF)
predictRF <- predict(modFitRF, testSet)
cmRF <- confusionMatrix(predictRF, testSet$classe)
cmRF
predictRF
predictRpart <- predict(modFitRpart, testData, type = "class")
cmRpart <- confusionMatrix(predictRpart, testSet$classe)
cmRpart
predictRpart <- predict(modFitRpart, testSet, type = "class")
## Train Decsion Tree
modFitRpart <-  train(classe ~ ., data=trainSet, method="rpart",  preProc = c("center", "scale") , method = "class")
## Train Decsion Tree
modFitRpart <-  train(classe ~ ., data=trainSet, method="rpart",  preProc = c("center", "scale"), method = "class")
## Train Decsion Tree
modFitRpart <-  train(classe ~ ., data=trainSet, method="rpart",  preProc = c("center", "scale"), method ="class")
modFitRF
modFitRpart
predictRf <- predict(modelRf, testData)
predictRf <- predict(modelRF, testData)
predictRf <- predict(modFitRF, testData)
confusionMatrix(testData$classe, predictRf)
confusionMatrix(testData$classe, predictRF)
confusionMatrix(testSet$classe, predictRF)
confusionMatrix(testSet$classe, predictRF)
predictRf <- predict(modFitRF, testSet)
confusionMatrix(testSet$classe, predictRF)
confusionMatrix(testSet$classe, predictRf)
predictRpart <- predict(modFitRpart, testData)
cmRpart <- confusionMatrix(testData$classe, predictRpart)
cmRpart
predictRpart <- predict(modFitRpart, newdat = testData)
## Train Decsion Tree
modFitRpart <-  train(classe ~ ., data=trainSet, method="rpart")
predictRpart <- predict(modFitRpart, testData)
cmRpart <- confusionMatrix(testData$classe, predictRpart)
cmRpart
predictRF
dim(testData)
predictRpart <- predict(modFitRpart, testData[, -length(names(testData))])
predictRpart <- predict(modFitRpart, testData)
predictRpart <- predict(modFitRpart, testData)
modFitRpart
predictRpart <- predict(midFitRpart, testData)
predictRpart <- predict(modFitRpart, testData)
## load libraries
library(caret)
library(randomForest)
library(e1071)
library(rattle)
library(knitr)
## download data files
trainFile <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainFileName <- "trainingdata.csv"
testFile <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testFileName <- "testdata.csv"
download.file(trainFile, destfile=trainFileName)
download.file(testFile, destfile=testFileName)
## Read data sets into data frames
trainData <- read.csv("trainingdata.csv")
testData <- read.csv("testdata.csv")
##Remove NAs
trainData <- trainData[, colSums(is.na(trainRaw)) == 0]
testFata <- testData[, colSums(is.na(testRaw)) == 0]
##Get rid of columns with little variance
classe <- trainRaw$classe
trainFix <- grepl("^X|timestamp|window", names(trainData))
trainData <- trainRaw[, !trainFix]
trainData <- trainData[, sapply(trainData, is.numeric)]
trainData$classe <- classe
testFix <- grepl("^X|timestamp|window", names(testData))
testData <- testData[, !testFix]
testData <- testData[, sapply(testData, is.numeric)]
classe <- trainData$classe
trainFix <- grepl("^X|timestamp|window", names(trainData))
trainData <- trainData[, !trainFix]
trainData <- trainData[, sapply(trainData, is.numeric)]
trainData$classe <- classe
testFix <- grepl("^X|timestamp|window", names(testData))
testData <- testData[, !testFix]
testData <- testData[, sapply(testData, is.numeric)]
## Partition TrainData to create a training set and a test set within the training data
set.seed(333) # For reproducibile purpose
inTrain <- createDataPartition(trainData$classe, p=0.70, list=F)
trainSet <- trainData[inTrain, ]
testSet <- trainData[-inTrain, ]
inTrain <- createDataPartition(trainData$classe, p=0.70, list=F)
trainData$classe
classe
classe <- trainData$classe
classe
## Read data sets into data frames
trainData <- read.csv("trainingdata.csv")
testData <- read.csv("testdata.csv")
##Remove NAs
trainData <- trainData[, colSums(is.na(trainRaw)) == 0]
testFata <- testData[, colSums(is.na(testRaw)) == 0]
trainData <- trainData[, colSums(is.na(trainData)) == 0]
testFata <- testData[, colSums(is.na(testData)) == 0]
trainData <- trainData[, colSums(is.na(trainData)) == 0]
testData <- testData[, colSums(is.na(testData)) == 0]
trainData <- read.csv("trainingdata.csv")
testData <- read.csv("testdata.csv")
##Remove NAs
trainData <- trainData[, colSums(is.na(trainData)) == 0]
testData <- testData[, colSums(is.na(trainDataData)) == 0]
testData <- testData[, colSums(is.na(trainData)) == 0]
## Read data sets into data frames
trainData <- read.csv("trainingdata.csv")
testData <- read.csv("testdata.csv")
##Remove NAs
trainData <- trainData[, colSums(is.na(trainData)) == 0]
testData <- testData[, colSums(is.na(trainData)) == 0]
##Get rid of columns with little variance
classe <- trainData$classe
trainFix <- grepl("^X|timestamp|window", names(trainData))
trainData <- trainData[, !trainFix]
trainData <- trainData[, sapply(trainData, is.numeric)]
trainData$classe <- classe
testFix <- grepl("^X|timestamp|window", names(testData))
testData <- testData[, !testFix]
testData <- testData[, sapply(testData, is.numeric)]
## Partition TrainData to create a training set and a test set within the training data
set.seed(333) # For reproducibile purpose
inTrain <- createDataPartition(trainData$classe, p=0.70, list=F)
trainSet <- trainData[inTrain, ]
testSet <- trainData[-inTrain, ]
## Train Decsion Tree
modFitRpart <-  train(classe ~ ., data=trainSet, method="rpart")
## Train Random Forest Tree
modFitRF <- train(classe ~ ., data=trainSet, method="rf")
predictRpart <- predict(modFitRpart, testData)
cmRpart <- confusionMatrix(testData$classe, predictRpart)
cmRpart
predictRpart
predictRF <- predict(modFitRF, testData)
predictRF
postResample(predictRF, testing$Class)
postResample(predictRF, testData$Classe)
postResample(predictRF, testData$Class)
cmRF <- confusionMatrix(testData$classe, predictRF)
testData$classe
head(testData)
accuracy <- postResample(predictRf, testData$classe)
accuracy
predictRF
trainData$classe
testData$classe
library(caret)
library(randomForest)
library(e1071)
library(rattle)
library(knitr)
## download data files
trainFile <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainFileName <- "trainingdata.csv"
testFile <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testFileName <- "testdata.csv"
download.file(trainFile, destfile=trainFileName)
download.file(testFile, destfile=testFileName)
## Read data sets into data frames
trainData <- read.csv("trainingdata.csv")
testData <- read.csv("testdata.csv")
##Remove NAs
trainData <- trainData[, colSums(is.na(trainData)) == 0]
testData <- testData[, colSums(is.na(trainData)) == 0]
##Get rid of columns with little effect on accelerometer
classe <- trainData$classe
trainFix <- grepl("^X|timestamp|window", names(trainData))
trainData <- trainData[, !trainFix]
trainData <- trainData[, sapply(trainData, is.numeric)]
trainData$classe <- classe
classe <- trainData$classe
testFix <- grepl("^X|timestamp|window", names(testData))
testData <- testData[, !testFix]
testData <- testData[, sapply(testData, is.numeric)]
testData$classe <- classe
## load libraries
library(caret)
library(randomForest)
library(e1071)
library(rattle)
library(knitr)
## download data files
trainFile <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainFileName <- "trainingdata.csv"
testFile <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testFileName <- "testdata.csv"
download.file(trainFile, destfile=trainFileName)
download.file(testFile, destfile=testFileName)
## Read data sets into data frames
trainData <- read.csv("trainingdata.csv")
testData <- read.csv("testdata.csv")
##Remove NAs
trainData <- trainData[, colSums(is.na(trainData)) == 0]
testData <- testData[, colSums(is.na(trainData)) == 0]
##Get rid of columns with little effect on accelerometer
classe <- trainData$classe
trainFix <- grepl("^X|timestamp|window", names(trainData))
trainData <- trainData[, !trainFix]
trainData <- trainData[, sapply(trainData, is.numeric)]
trainData$classe <- classe
classe <- testData$classe
testFix <- grepl("^X|timestamp|window", names(testData))
testData <- testData[, !testFix]
testData <- testData[, sapply(testData, is.numeric)]
testData$classe <- classe
predictRF <- predict(modFitRF, testData)
cmRF <- confusionMatrix(testData$classe, predictRF)
cmRF
testData$classe
## load libraries
library(caret)
library(randomForest)
library(e1071)
library(rattle)
library(knitr)
## download data files
trainFile <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainFileName <- "trainingdata.csv"
testFile <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testFileName <- "testdata.csv"
download.file(trainFile, destfile=trainFileName)
download.file(testFile, destfile=testFileName)
## Read data sets into data frames
trainData <- read.csv("trainingdata.csv")
testData <- read.csv("testdata.csv")
##Remove NAs
#trainData <- trainData[, colSums(is.na(trainData)) == 0]
#testData <- testData[, colSums(is.na(trainData)) == 0]
##Get rid of columns with little effect on accelerometer
classe <- trainData$classe
trainFix <- grepl("^X|timestamp|window", names(trainData))
trainData <- trainData[, !trainFix]
trainData <- trainData[, sapply(trainData, is.numeric)]
trainData$classe <- classe
classe <- testData$classe
testFix <- grepl("^X|timestamp|window", names(testData))
testData <- testData[, !testFix]
testData <- testData[, sapply(testData, is.numeric)]
testData$classe <- classe
classe
## load libraries
library(caret)
library(randomForest)
library(e1071)
library(rattle)
library(knitr)
## download data files
trainFile <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainFileName <- "trainingdata.csv"
testFile <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testFileName <- "testdata.csv"
download.file(trainFile, destfile=trainFileName)
download.file(testFile, destfile=testFileName)
## Read data sets into data frames
trainData <- read.csv("trainingdata.csv")
testData <- read.csv("testdata.csv")
##Remove NAs
#trainData <- trainData[, colSums(is.na(trainData)) == 0]
#testData <- testData[, colSums(is.na(trainData)) == 0]
##Get rid of columns with little effect on accelerometer
classe <- trainData$classe
trainFix <- grepl("^X|timestamp|window", names(trainData))
trainData <- trainData[, !trainFix]
trainData <- trainData[, sapply(trainData, is.numeric)]
trainData$classe <- classe
classe <- trainData$classe
classe
classe <- testData$classe
classe
fancyRpartPlot(modFitRpart)
plot(modFitRpart, uniform=TRUE)
plot(modFitRF, uniform=TRUE)
print(modFitRF)
print(modFitRF)
print(modFitRpart)
oose <- 1 - as.numeric(confusionMatrix(testData$classe, predictRf)$overall[1])
oose
print(modFitRpart)
print(modFitRF)
predictRF
